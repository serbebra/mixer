// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Mixer {
    mapping(address => uint256) public balances;

    event Deposit(address indexed sender, uint256 amount);
    event Withdrawal(address indexed recipient, uint256 amount);

    // Deposit tokens into the mixer
    function deposit() external payable {
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    // Withdraw tokens from the mixer to a specified recipient
    function withdraw(address payable _recipient, uint256 _amount) external {
        require(balances[msg.sender] >= _amount, "Insufficient balance");
        balances[msg.sender] -= _amount;
        _recipient.transfer(_amount);
        emit Withdrawal(_recipient, _amount);
    }
}
